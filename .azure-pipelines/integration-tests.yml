trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - .github/*
pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - .github/*

pool:
  vmImage: ubuntu-18.04
variables:
  buildConfiguration: Debug
  packageFeed: /ffc32c57-3e0e-4e8f-8633-a7ad01df2e45
  #NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  publishOutput: $(System.DefaultWorkingDirectory)/src/bin/managed-publish
  dotnetCoreSdkVersion: 3.1.x

jobs:

- job: build_linux_profiler

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Debug/x64
    artifact: linux-tracer-home

- job: Linux
  dependsOn: build_linux_profiler
  condition: succeeded()
  strategy:
    matrix:
      netcoreapp2_1:
        dotnetCoreSdkVersion: 2.1.x
        publishTargetFramework: netcoreapp2.1
      netcoreapp3_0:
        dotnetCoreSdkVersion: 3.0.x
        publishTargetFramework: netcoreapp3.0
      netcoreapp3_1:
        dotnetCoreSdkVersion: 3.1.x
        publishTargetFramework: netcoreapp3.1
 
  variables:
    TestAllPackageVersions: true

  steps:
  - download: current
    artifact: linux-tracer-home

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/linux-tracer-home
      targetFolder: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Debug/x64

  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) build

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) IntegrationTests

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: build_alpine_linux_profiler

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler.Alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler.Alpine

  - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Debug/x64
    artifact: alpine-linux-tracer-home

- job: Alpine_Linux
  dependsOn: build_alpine_linux_profiler
  condition: succeeded()
  strategy:
    matrix:
      netcoreapp2_1:
        dotnetCoreSdkVersion: 2.1.x
        publishTargetFramework: netcoreapp2.1
      netcoreapp3_0:
        dotnetCoreSdkVersion: 3.0.x
        publishTargetFramework: netcoreapp3.0
      netcoreapp3_1:
        dotnetCoreSdkVersion: 3.1.x
        publishTargetFramework: netcoreapp3.1
  
  variables:
    TestAllPackageVersions: true

  steps:
  - download: current
    artifact: alpine-linux-tracer-home

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/alpine-linux-tracer-home
      targetFolder: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Debug/x64

  - task: DockerCompose@0
    displayName: docker-compose run build
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) -e publishTargetFramework=$(publishTargetFramework) build

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core21
    condition: eq(variables['publishTargetFramework'], 'netcoreapp2.1')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core21

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core30
    condition: eq(variables['publishTargetFramework'], 'netcoreapp3.0')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core30

  - task: DockerCompose@0
    displayName: docker-compose run IntegrationTests.Alpine.Core31
    condition: eq(variables['publishTargetFramework'], 'netcoreapp3.1')
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run -e TestAllPackageVersions=true -e buildConfiguration=$(buildConfiguration) IntegrationTests.Alpine.Core31

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: test/**/*.trx
    condition: succeededOrFailed()

- job: Windows

  pool:
    vmImage: windows-2019

  variables:
    buildPlatform: x64

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk 2.1
    inputs:
      packageType: sdk
      version: 2.1.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 3.0
    inputs:
      packageType: sdk
      version: 3.0.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 3.1
    inputs:
      packageType: sdk
      version: 3.1.x

  - task: NuGetToolInstaller@1
    displayName: install nuget

  #- task: Cache@2
  #  displayName: Cache NuGet packages
  #  inputs:
  #    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
  #    restoreKeys: |
  #       nuget | "$(Agent.OS)"
  #       nuget
  #    path: $(NUGET_PACKAGES)

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      restoreSolution: Datadog.Trace.sln
      vstsFeed: $(packageFeed)
      verbosityRestore: Normal

  # this triggers a dependency chain that builds all the managed, x64, and x86 dlls
  - task: MSBuild@1
    displayName: msbuild tracer-home
    inputs:
      solution: Datadog.Trace.proj
      platform: x64
      configuration: $(buildConfiguration)
      msbuildArguments: /t:CreateHomeDirectory /p:TracerHomeDirectory=$(publishOutput)
      maximumCpuCount: true

  - task: MSBuild@1
    displayName: Build .NET Framework projects (not SDK-based projects)
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:BuildFrameworkReproductions
      maximumCpuCount: true

  - task: DotNetCoreCLI@2
    displayName: dotnet build integration tests
    inputs:
      command: build
      projects: |
        reproductions/**/*.csproj
        samples/**/*.csproj
        test/*.IntegrationTests/*.IntegrationTests.csproj
        !reproductions/**/ExpenseItDemo*.csproj
        !reproductions/**/EntityFramework6x*.csproj
        !reproductions/**/StackExchange.Redis.AssemblyConflict.LegacyProject.csproj
      arguments: --configuration $(buildConfiguration) -p:Platform=$(buildPlatform) -p:ManagedProfilerOutputDirectory=$(publishOutput)

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      configuration: $(buildConfiguration)
      projects: |
        test/Datadog.Trace.IntegrationTests/Datadog.Trace.IntegrationTests.csproj
        test/Datadog.Trace.OpenTracing.IntegrationTests/Datadog.Trace.OpenTracing.IntegrationTests.csproj
      arguments: -p:Platform=$(buildPlatform)

  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: test
      configuration: $(buildConfiguration)
      projects: test/Datadog.Trace.ClrProfiler.IntegrationTests/Datadog.Trace.ClrProfiler.IntegrationTests.csproj
      arguments: --filter "RunOnWindows=True|Category=Smoke" -p:Platform=$(buildPlatform)
