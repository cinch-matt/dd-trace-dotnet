trigger:
  branches:
    include:
      - refs/tags/*
pr: none

variables:
  buildConfiguration: release
  packageFeed: /ffc32c57-3e0e-4e8f-8633-a7ad01df2e45
  #NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  dotnetCoreSdkVersion: 3.1.x

jobs:

#### Windows msi and NuGet
- job: windows_packages_and_nuget
  pool:
    vmImage: windows-2019
  variables:
    tracerHomeName: windows-tracer-home
    tracerHome: $(System.DefaultWorkingDirectory)/src/bin/$(tracerHomeName)
    msiHome: $(System.DefaultWorkingDirectory)/src/bin/msi
    nuget_packages: $(Pipeline.Workspace)/.nuget/packages

  steps:
  #- task: Cache@2
  #  displayName: Cache NuGet packages
  #  inputs:
  #    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
  #    restoreKeys: |
  #       nuget | "$(Agent.OS)"
  #       nuget
  #    path: $(NUGET_PACKAGES)

  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      packageType: sdk
      version: $(dotnetCoreSdkVersion)

  - task: NuGetToolInstaller@1
    displayName: install nuget

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      vstsFeed: $(packageFeed)
      projects: src/**/*.csproj

  # native projects must be restored with nuget.exe
  - task: NuGetCommand@2
    displayName: nuget restore native
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      vstsFeed: $(packageFeed)
      verbosityRestore: Normal

  # this triggers a dependency chain that builds all the managed, x64, and x86 dlls, and the zip and msi files
  - task: MSBuild@1
    displayName: build both msi
    inputs:
      solution: Datadog.Trace.proj
      configuration: $(buildConfiguration)
      msbuildArguments: /t:msi /p:Platform=All;ZipHomeDirectory=true;TracerHomeDirectory=$(tracerHome);RunWixToolsOutOfProc=true;MsiOutputPath=$(msiHome)
      maximumCpuCount: true

  - publish: $(msiHome)/en-us
    artifact: windows-msi

  - publish: $(tracerHome).zip
    artifact: $(tracerHomeName)

  - task: DotNetCoreCLI@2
    displayName: build nugets
    inputs:
      command: pack
      packagesToPack: src/Datadog.Trace/Datadog.Trace.csproj;src/Datadog.Trace.OpenTracing/Datadog.Trace.OpenTracing.csproj
      packDirectory: $(System.DefaultWorkingDirectory)/nuget-output
      configuration: $(buildConfiguration)

  - publish: $(System.DefaultWorkingDirectory)/nuget-output
    artifact: nuget-packages

#### Linux packages

- job: linux_packages
  pool:
    vmImage: ubuntu-18.04
  variables:
    tracerHome: $(System.DefaultWorkingDirectory)/src/bin/managed-publish

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  #- task: Cache@2
  #  displayName: Cache NuGet packages
  #  inputs:
  #    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
  #    restoreKeys: |
  #       nuget | "$(Agent.OS)"
  #       nuget
  #    path: $(NUGET_PACKAGES)

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(tracerHome)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run package
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run package

  - publish: deploy/linux
    artifact: linux-packages

- job: linux_alpine_packages
  pool:
    vmImage: ubuntu-18.04
  variables:
    tracerHome: $(System.DefaultWorkingDirectory)/src/bin/managed-publish

  steps:
  - task: UseDotNet@2
    displayName: install dotnet core sdk
    inputs:
      version: $(dotnetCoreSdkVersion)

  #- task: Cache@2
  #  displayName: Cache NuGet packages
  #  inputs:
  #    key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
  #    restoreKeys: |
  #       nuget | "$(Agent.OS)"
  #       nuget
  #    path: $(NUGET_PACKAGES)

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(tracerHome)/netstandard2.0

  - task: DockerCompose@0
    displayName: docker-compose run Profiler.Alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler.Alpine

  - task: DockerCompose@0
    displayName: docker-compose run package.alpine
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run package.alpine

  - publish: deploy/linux
    artifact: linux-alpine-packages
